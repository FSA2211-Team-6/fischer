// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model ExpertResponse {
  id          Int    @id @default(autoincrement())
  postId      Int
  expertId    Int    
  content     String
  compliance  Int?      
  createdAt   DateTime @default(now())
  upvotes     Int      @default(0)
  votedUsers  UserExpertResponseVote[]

  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  expert      Expert   @relation(fields: [expertId], references: [id], onDelete: Cascade)
}

model UserExpertResponseVote {
  expertResponseId       Int
  compliance      Int       @default(0)
  fischerId       Int

  user            User      @relation(fields: [fischerId], references: [fischerId], onDelete: Cascade)
  expertResponse         ExpertResponse      @relation(fields: [expertResponseId], references: [id], onDelete: Cascade)
  @@unique([fischerId, expertResponseId])
}

model ExpertCompliance {
  postId          Int
  compliance      Int
  expertId       Int
  fischerId       Int

  expert            Expert      @relation(fields: [expertId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [fischerId], references: [fischerId], onDelete: Cascade)
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([expertId, postId])
}

model Comment {
  id              Int         @id @default(autoincrement())
  postId          Int
  fischerId       Int
  content         String
  createdAt       DateTime    @default(now())
  upvotes         Int         @default(0)
  votedUsers      UserCommentVote[]

  post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  commenter       User        @relation(fields: [fischerId], references: [fischerId], onDelete: Cascade)
}

model UserCommentVote {
  commentId       Int
  compliance      Int       @default(0)
  fischerId       Int

  user            User      @relation(fields: [fischerId], references: [fischerId], onDelete: Cascade)
  comment         Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  @@unique([fischerId, commentId])
}

model UserCompliance {
  postId          Int
  compliance      Int
  fischerId       Int

  user            User      @relation(fields: [fischerId], references: [fischerId], onDelete: Cascade)
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([fischerId, postId])
}

model User {
  id                String    @default(cuid()) @unique
  name              String
  email             String    @unique
  emailVerified     DateTime?
  image             String    @default("/images/user.jpeg")
  createdAt         DateTime  @default(now())
  fischerId         Int       @id @default(autoincrement())
  currentTokens     Int       @default(1)
  maxTokens         Int       @default(1)
  isAdmin           Boolean   @default(false)

  userCompliances   UserCompliance[]
  expertCompliances   ExpertCompliance[]
  
  accounts          Account[]
  sessions          Session[]
  comments          Comment[]
  expertise         Expert[]
  posts             Post[]
  userCommentVotes   UserCommentVote[]
  userExpertResponseVotes UserExpertResponseVote[]
}

model BadPost {
  id                Int             @id @default(autoincrement())
  assertion         String
  response          String
  createdAt         DateTime        @default(now())
  websiteArticleId  Int

  websiteArticle    WebsiteArticle  @relation(fields: [websiteArticleId], references: [id])
}

model Post {
  websiteArticleId  Int?
  topicId           Int
  fischerId         Int?
  createdAt         DateTime        @default(now())
  assertion         String
  id                Int             @id @default(autoincrement())
  aiResponse        String
  aiCompliance      Int             @default(0)
  publicCompliance  Int             @default(0)
  topicName         String
  innerHTML         String          @default("test")

  expertResponses   ExpertResponse[]
  comments          Comment[]
  userCompliances   UserCompliance[]
  expertCompliances ExpertCompliance[]
  websiteArticle    WebsiteArticle?  @relation(fields: [websiteArticleId], references: [id])
  topic             Topic           @relation(fields: [topicId], references: [id])
  user              User?            @relation(fields: [fischerId], references: [fischerId])
}

model WebsiteArticle {
  id          Int       @id @default(autoincrement())
  websiteId   Int
  articleURL  String    @unique

  posts       Post[]
  badPosts    BadPost[]

  website     Website   @relation(fields: [websiteId], references: [id])
}

model Website {
  id               Int       @id @default(autoincrement())
  hostSite         String    @unique

  websiteArticles  WebsiteArticle[]
}

model Expert {
  topicId           Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  id                Int       @id @default(autoincrement())
  fischerId         Int
  approval          Boolean?

  expertResponses   ExpertResponse[]
  expertCompliances ExpertCompliance[]

  topic             Topic         @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [fischerId], references: [fischerId], onDelete: Cascade)
  @@unique([fischerId, topicId])
}

model Topic {
  name        String    @unique
  id          Int       @id @default(autoincrement())

  experts     Expert[]
  posts       Post[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
